

=================================================
저장한 시간: 2025-03-11 오후 1:49:20 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <vector>
//#include <algorithm>
#include <chrono>
void save( std::string_view );


int main()
{

	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"

// [문제] main에서 의도대로 실행되게


int main()
{

	int a{ 1 }, b{ 2 };

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main에서 의도대로 실행되게


template <typename T>
void change(T& a, T& b) {
	T temp = a;
	b = a;
	a = temp;
}

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main에서 의도대로 실행되게


template <typename T>
void change(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main을 수정하지 않고 의도대로 실행되게

void change(int&, int&);

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

#pragma once
//-----------------------------------------------------------------------------
// save.h								2025년 3월 11일
// ----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:27:04 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main을 수정하지 않고 의도대로 실행되게

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:33:27 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:33:43 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:36:46 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T&, T&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:41:14 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	std::cout << "Dog의 크기 = " << sizeof(Dog);
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:53:51 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

template <>
void change(Dog& a, Dog& b)
{
	Dog temp{ a };
	a = b;
	b = temp;
}

template <>
void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		// 1. change( Dog, Dog );
		// 2. change( Dog&, Dog& );
		// 3. 컴파일러가 template을 이용하여 코드 생성
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:55:03 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		// 1. change( Dog, Dog );
		// 2. change( Dog&, Dog& );
		// 3. 컴파일러가 template을 이용하여 코드 생성
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:55:22 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함


int main()
{
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:59:43 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// 랜덤 int 1000개를 화면에 출력하라

void printRandomInt() {
	std::random_device rd;
	std::uniform_int_distribution<int> randomNumber(0, 9);
	
	for (int i = 0; i < 1000; i++) {
		std::cout << randomNumber << '\n';
	}
}

int main()
{
	printRandomInt();

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:00:33 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// 랜덤 int 1000개를 화면에 출력하라

void printRandomInt() {
	std::random_device rd;
	std::uniform_int_distribution<int> uid (0, 9);
	
	for (int i = 0; i < 1000; i++) {
		std::cout << uid(rd) << '\n';
	}
}

int main()
{
	printRandomInt();

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:06:08 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// 랜덤 int 1000개를 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::cout << uid(dre) << " ";
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:08:13 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// 랜덤 int 1000개를 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 11:20:24 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 11:32:24 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 3:35:39 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 3:38:22 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 3:51:56 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 저장된 값 중에서 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };




int main()
{
	// T[N]
	int arr[ 1'000 ];

	for (int i = 0; i < 1000; ++i) {
		arr[i] = uid(dre);
	}

	int maxValue{ std::numeric_limits<int>::min() };

	for (int i = 0; i < 1000; ++i) {
		if (arr[i] > maxValue)
			maxValue = arr[i];
	}

	std::cout << "최댓값 = " << maxValue << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:09:54 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 저장된 값 중에서 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };




int main()
{
	std::array<int, 1000> arr;						// T[N] ---> array<T,N>

	for ( int& num : arr )			// magic number, hard-wired
		num = uid(dre);

	auto 위치 = std::max_element(arr.begin(), arr.end());


	std::cout << "최댓값 = " << *위치 << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:11:10 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 저장된 값 중에서 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };




int main()
{
	std::array<int, 1000> arr;						// T[N] ---> array<T,N>

	for (int& num : arr)			// magic number, hard-wired
		num = uid(dre);

	std::cout << "최댓값 = " << *(std::max_element(arr.begin(), arr.end())) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:26:06 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <array>
#include <algorithm>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::print("(:80)", 20250311);

	/*for (int i = 0; i < 1'000; ++i) {
		std::print("(:8)", uid(dre));
	}*/


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:26:30 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <array>
#include <algorithm>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::print("(:80)", 20250311);

	/*for (int i = 0; i < 1'000; ++i) {
		std::print("(:8)", uid(dre));
	}*/


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:27:06 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::print("(:80)", 20250311);

	/*for (int i = 0; i < 1'000; ++i) {
		std::print("(:8)", uid(dre));
	}*/


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:31:23 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	for (int i = 0; i < 1'000; ++i)
		std::print(out, "{:8}", uid(dre));


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:32:28 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	for (int i = 0; i < 1'000; ++i)
		std::print(out, "{:8}", uid(dre));


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:32:45 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	for (int i = 0; i < 1'000; ++i)
		std::print(out, "{:8}", uid(dre));


	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:36:32 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	for (int i = 0; i < 1'000; ++i)
		std::print(out, "{:8}", uid(dre));

	/*std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ"<<'\n';
		exit(-1);
	}*/



	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:37:23 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	for (int i = 0; i < 1'000; ++i)
		std::print(out, "{:8} ***", uid(dre));

	/*std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ"<<'\n';
		exit(-1);
	}*/



	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:39:56 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	int cnt{};
	for (int i = 0; i < 1'000; ++i) {
		std::print(out, "{:8} ***", uid(dre));
		if (not ++cnt % 10)
			out << '\n';
	}
	std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ"<<'\n';
		exit(-1);
	}



	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:40:13 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include <fstream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 파일 "int 1000개.txt"에 텍스트 모드로 저장하라.
// 파일을 열었을 때 사람이 읽을 수 있어야 한다.
// 파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	int cnt{};
	for (int i = 0; i < 1'000; ++i) {
		std::print(out, "{:8} ***", uid(dre));
		if (not(++cnt % 10))
			out << '\n';
	}
	std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ"<<'\n';
		exit(-1);
	}



	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:52:06 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>

#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num;
	int maxValue = std::numeric_limits<int>::min();
	size_t cnt { };
	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	
	std::cout << "읽은 개수 - " << cnt << '\n';
	std::cout << "최댓값 - " << maxValue << '\n';
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:52:17 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>

#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num;
	int maxValue = std::numeric_limits<int>::min();
	size_t cnt { };
	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	
	std::cout << "읽은 개수 - " << cnt << '\n';
	std::cout << "최댓값 - " << maxValue << '\n';
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:52:20 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>

#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num;
	int maxValue = std::numeric_limits<int>::min();
	size_t cnt { };
	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	
	std::cout << "읽은 개수 - " << cnt << '\n';
	std::cout << "최댓값 - " << maxValue << '\n';
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:52:47 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>

#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num;
	int maxValue = std::numeric_limits<int>::min();
	size_t cnt { };
	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	
	std::cout << "읽은 개수 - " << cnt << '\n';
	std::cout << "최댓값 - " << maxValue << '\n';
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:58:35 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::cout << "최댓값 - " << *std::max_element(std::istream_iterator<int>{in}, {}) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:58:41 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::cout << "최댓값 - " << *std::max_element(std::istream_iterator<int>{in}, {}) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:59:18 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::cout << "최댓값 - " << *std::max_element(std::istream_iterator<int>{in}, {}) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 4:59:57 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::cout << "최댓값 - " << *std::max_element(std::istream_iterator<int>{in}, {}) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:00:34 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>

#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.



int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num;
	int maxValue = std::numeric_limits<int>::min();
	size_t cnt { };
	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	
	std::cout << "읽은 개수 - " << cnt << '\n';
	std::cout << "최댓값 - " << maxValue << '\n';
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:04:01 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int i{};
	while (in >> arr[i]) {
		++i;
	}

	std::print("{:8}", arr);
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:05:35 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int i{};
	while (in >> arr[i]) {
		std::cout << "!";
		++i;
	}
	std::print("{:8}", arr);
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:06:26 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int i{};
	while (in >> arr[i]) {
		++i;
	}
	std::print("{:8}", arr);
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:07:10 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int i{};
	while (in >> arr[i]) {
		++i;
	}
	std::print("{:8}", arr);
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:09:09 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num;
	
	for (int i = 0; i < num; ++i) {
		in >> num;
		arr[i] = num;
	}

	std::print("{:8}", arr);
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-13 오후 5:10:56 목요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:22:31 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:22:51 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:27:43 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
		std::print("{:2}", i);
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:28:23 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		std::print("{:8}", num);
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:33:23 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.


int main()
{
	std::random_device rd{};
	std::cout << "이 값은 추척 불가능" << std::endl;
	
	for (int i = 0; i < 100; ++i)
		std::cout << rd() << "\t";

	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:35:03 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	int cnt{};
	for (int i = 0; i < 1'000; ++i) {
		std::print(out, "{:8} ***", uid(dre));
		if (not(++cnt % 10))
			out << '\n';
	}
	std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ" << '\n';
		exit(-1);
	}



	save("main.cpp");

	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:35:03 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	std::ofstream out("int 1000개.txt");			// RAII

	int cnt{};
	for (int i = 0; i < 1'000; ++i) {
		std::print(out, "{:8} ***", uid(dre));
		if (not(++cnt % 10))
			out << '\n';
	}
	std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ" << '\n';
		exit(-1);
	}



	save("main.cpp");

	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:36:30 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{
	
	std::ofstream out("int 1000개.txt");			// RAII

	int cnt{};
	for (int i = 0; i < 1'000; ++i) {
		std::print(out, "{:8}", uid(dre));
		if (not(++cnt % 10))
			out << '\n';
	}
	std::ifstream in("int 1000개.txt");
	if (not in) {
		std::cout << "파일 없음 ㅇㅇ" << '\n';
		exit(-1);
	}


	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:36:52 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 13일 목요일					(2주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include <print>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 파일 "int 1000개.txt"에는 int값 1000개가 text로 기록되어 있다.
// 이 데이터를 메모리에 저장하라.
// 메모리에 있는 데이터를 화면에 출력하라.

std::default_random_engine dre{ std::random_device{}() };
std::uniform_int_distribution uid{ 0,999'9999 };

int main()
{

	std::ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	std::array<int, 1000> arr{};
	int num{ arr.size() };
	
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr) {
		std::print("{:8}", num );
	}
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 1:45:27 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <bitset>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] 지난시간에 int 1000개를 파일에 기록하였다.
// int 1000개를 저장하기 위해 얼마만큼의 파일 바이트를 사용하였나? -> 8200 바이트

int main()
{
	int num{ 0x01'02'03'04 };

	std::cout << "16진수로 - " << std::hex << num << '\n';
	std::cout << "10진수로 - " << num << '\n';

	std::bitset<32> binary = num ;

	std::cout << "2진수 - " << binary << '\n';
		save("main.cpp"); 
}

=================================================
저장한 시간: 2025-03-18 오후 1:45:44 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <bitset>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] 지난시간에 int 1000개를 파일에 기록하였다.
// int 1000개를 저장하기 위해 얼마만큼의 파일 바이트를 사용하였나? -> 8200 바이트

int main()
{
	int num{ 0x01'02'03'04 };

	std::cout << "16진수로 - " << std::hex << num << '\n';
	std::cout << "10진수로 - " << num << '\n';

	std::bitset<32> binary = num ;

	std::cout << " 2진수 - " << binary << '\n';
		save("main.cpp"); 
}

=================================================
저장한 시간: 2025-03-18 오후 1:46:01 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <bitset>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] 지난시간에 int 1000개를 파일에 기록하였다.
// int 1000개를 저장하기 위해 얼마만큼의 파일 바이트를 사용하였나? -> 8200 바이트

int main()
{
	int num{ 0x01'02'03'04 };

	std::cout << "16진수로 - " << std::hex << num << '\n';
	std::cout << "10진수로 - " << num << '\n';

	std::bitset<32> binary = num ;

	std::cout << " 2진수로 - " << binary << '\n';
		save("main.cpp"); 
}

=================================================
저장한 시간: 2025-03-18 오후 1:47:14 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <bitset>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] 지난시간에 int 1000개를 파일에 기록하였다.
// int 1000개를 저장하기 위해 얼마만큼의 파일 바이트를 사용하였나? -> 8200 바이트

int main()
{
	int num{ 0x01'02'03'04 };

	std::bitset<32> binary = num;

	std::cout << " 2진수로 - " << binary << '\n';
	std::cout << "10진수로 - " << num << '\n';
	std::cout << "16진수로 - " << std::hex << num << '\n';

	
		save("main.cpp"); 
}

=================================================
저장한 시간: 2025-03-18 오후 1:47:30 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <bitset>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] 지난시간에 int 1000개를 파일에 기록하였다.
// int 1000개를 저장하기 위해 얼마만큼의 파일 바이트를 사용하였나? -> 8200 바이트

int main()
{
	int num{ 0x01'02'03'04 };

	std::bitset<32> binary = num;

	std::cout << " 2진수로 - " << binary << '\n';
	std::cout << "10진수로 - " << num << '\n';
	std::cout << "16진수로 - " << std::hex << num << '\n';

	
		save("main.cpp"); 
}

=================================================
저장한 시간: 2025-03-18 오후 2:17:52 화요일
=================================================

=================================================
저장한 시간: 2025-03-18 오후 2:35:55 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// 파일을 "int 10만개를 바이너리모드 write함수로 기록"에 10만개의 랜덤 int 값을 기록하자.
// 이 int값은 메모리 크기 그대로 기록한다.
// 파일을 binary mode로 열자.

std::default_random_engine dre;


int main()
{
	std::ofstream out{ "int 10만개를 바이너리모드 write함수로 기록", std::ios::binary };
	
	std::uniform_int_distribution uid{ std::numeric_limits<int>::min(), std::numeric_limits<int>::max() };

	int num;
	for (int i = 0; i < 10'0000; ++i) {
		num = uid(dre);
		out.write( (char*) & num, sizeof(int));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:49:03 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	
	std::array<int, 100000> a;

	int i{};
	while (in >> a[i]) {
		i++;
	}

	std::cout << *std::min_element(a.begin(), a.end());

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:49:13 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	
	std::array<int, 100000> a;

	int i{};
	while (in >> a[i]) {
		i++;
	}

	std::cout << *std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:51:07 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록" };
	
	std::array<int, 100000> a;

	int i{};
	while (in >> a[i]) {
		i++;
	}

	std::cout << *std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:51:14 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	
	std::array<int, 100000> a;

	int i{};
	while (in >> a[i]) {
		i++;
	}

	std::cout << *std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:51:56 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	int i{};
	while (in >> a[i]) {
		i++;
	}

	std::cout << *std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:58:00 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	for (int& num : a)
		in.read((char*)&num, sizeof(int));

	std::cout << *std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:58:41 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	for (int& num : a)
		in.read((char*)&num, sizeof(int));

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:59:26 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록" };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	for (int& num : a)
		in.read((char*)&num, sizeof(int));

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:59:34 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	for (int& num : a)
		in.read((char*)&num, sizeof(int));

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 2:59:49 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록" };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	for (int& num : a)
		in.read((char*)&num, sizeof(int));

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';
	// -2147431498

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 3:02:05 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	in.read((char*)a.data(), sizeof(int) * a.size());

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-18 오후 3:02:57 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 18일 화요일					(3주 1일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기 - 파일에 저장하고 읽어 오기
//						--> 파일을 binary모드로 열어야 변환되지 않는다.
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다

// [문제] binary로 열어 기록한 파일 "int 10만개를 바이너리모드 write함수로 기록"에는
// int값 10만개가 메모리 크기 그대로 기록되어 있다. (ostream의 write 함수를 사용)
// int값 10만개를 읽어서 메모리에 저장하시오.
// 가장 작은 값을 찾아 화면에 출력하라.
// 이 문제를 해결하는 코드를 답지에 적어라.
// 화면에 출력된 값도 답지에 적어라.

int main()
{

	std::ifstream in { "int 10만개를 바이너리모드 write함수로 기록",std::ios::binary };
	if (not in)
		exit(-20250318);

	std::array<int, 100000> a;

	in.read((char*)a.data(), sizeof(int) * a.size());

	std::cout << "최솟값 - " << * std::min_element(a.begin(), a.end()) << '\n';
	// -2147431498

	save("main.cpp");
}