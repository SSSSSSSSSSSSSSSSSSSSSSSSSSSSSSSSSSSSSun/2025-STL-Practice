

=================================================
저장한 시간: 2025-03-11 오후 1:49:20 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <vector>
//#include <algorithm>
#include <chrono>
void save( std::string_view );


int main()
{

	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"

// [문제] main에서 의도대로 실행되게


int main()
{

	int a{ 1 }, b{ 2 };

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 1:54:34 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main에서 의도대로 실행되게


template <typename T>
void change(T& a, T& b) {
	T temp = a;
	b = a;
	a = temp;
}

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 1:59:45 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main에서 의도대로 실행되게


template <typename T>
void change(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

#pragma once
//---------------------------------------------------------------
// save.h								2025년 3월 11일
// 
// --------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 2:00:02 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main을 수정하지 않고 의도대로 실행되게

void change(int&, int&);

int main()
{

	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

#pragma once
//-----------------------------------------------------------------------------
// save.h								2025년 3월 11일
// ----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <chrono>

// [문제] save 함수를 제대로 코딩하라.
void save(std::string_view);

=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

//---------------------------------------------------------------
// save.cpp								2025년 3월 11일
// 
// 한 학기 강의를 덧붙여 저장하는 함수이다.
// --------------------------------------------------------------
#include "save.h"

void save(std::string_view fileName)
{
	// fileName을 읽기모드로 연다
	std::ifstream in{ fileName.data() };		// RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다" << std::endl;
		exit(20250306);
	}

	// 쓰기모드로 저장할 파일을 연다
	std::string nameForSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameForSave , std::ios::app };

	// 저장했다고 화면 출력

	auto size = std::filesystem::file_size(fileName);
	std::cout << nameForSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << "Bytes" << std::endl;

	// 저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();				// time_point를 얻는다. epoch
	auto utc = std::chrono::system_clock::to_time_t(now);		// UTC 시간으로 변경
	auto lt = std::localtime(&utc);							// 지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);			// 원 locale을 복구

	// 읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:27:04 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// save 파일로 분리 / template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] main을 수정하지 않고 의도대로 실행되게

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:33:27 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:33:43 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

void change(Dog&, Dog&);
void change(int&, int&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}


void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:36:46 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T&, T&);

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

=================================================
저장한 시간: 2025-03-11 오후 2:41:14 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	std::cout << "Dog의 크기 = " << sizeof(Dog);
	{
		Dog a{1}, b{2};
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:53:51 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

template <>
void change(Dog& a, Dog& b)
{
	Dog temp{ a };
	a = b;
	b = temp;
}

template <>
void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		// 1. change( Dog, Dog );
		// 2. change( Dog&, Dog& );
		// 3. 컴파일러가 template을 이용하여 코드 생성
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:55:03 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함

class Dog {
private:
	int integer{ };

public:
	Dog() {};
	Dog(int input) : integer(input) {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.integer;
	}

};

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		Dog a{1}, b{2};
		change(a, b);
		// 1. change( Dog, Dog );
		// 2. change( Dog&, Dog& );
		// 3. 컴파일러가 template을 이용하여 코드 생성
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.

	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 의도 - 2, 1 이 출력되어야 한다.
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:55:22 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// template 복습
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// [문제] C++언어에서 change 함수는 몇 번이나 overloading 해야 할까?
// --> C++ 언어의 자료형은 몇 개인가? -> 무한함


int main()
{
	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 2:59:43 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// 랜덤 int 1000개를 화면에 출력하라

void printRandomInt() {
	std::random_device rd;
	std::uniform_int_distribution<int> randomNumber(0, 9);
	
	for (int i = 0; i < 1000; i++) {
		std::cout << randomNumber << '\n';
	}
}

int main()
{
	printRandomInt();

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:00:33 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다.

// 랜덤 int 1000개를 화면에 출력하라

void printRandomInt() {
	std::random_device rd;
	std::uniform_int_distribution<int> uid (0, 9);
	
	for (int i = 0; i < 1000; i++) {
		std::cout << uid(rd) << '\n';
	}
}

int main()
{
	printRandomInt();

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:06:08 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// 랜덤 int 1000개를 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::cout << uid(dre) << " ";
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 3:08:13 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// 랜덤 int 1000개를 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 11:20:24 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}

=================================================
저장한 시간: 2025-03-11 오후 11:32:24 화요일
=================================================

//------------------------------------------------------------------
// 2025 STL 화56목78	3월 6일 목요일					(1주 2일)
//------------------------------------------------------------------
// 많은 수의 자료를 처리하기
//------------------------------------------------------------------
// VS 버전 - 17.13 이상
// Release / x64, C++언어표준 - /std::c++latest, SDL 검사 - 아니오
#include <iostream>
#include <random>
#include <print>
#include "save.h"
// using namespace std;			// 우리는 이렇게 하면 안된다
// 
// [문제] 랜덤 int 1000개를 메모리에 저장하라
// 가장 큰 값을 찾아 화면에 출력하라

std::default_random_engine dre;
std::uniform_int_distribution uid{ 0,9999999 };

int main()
{
	for (int i = 0; i < 1000; ++i) {
		std::print("{:8}", uid(dre));
	}

	save("main.cpp");
}